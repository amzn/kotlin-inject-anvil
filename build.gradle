//file:noinspection UnnecessaryQualifiedReference
buildscript {
    dependencies {
        classpath libs.android.gradle.plugin
        classpath libs.kotlin.gradle.plugin
        classpath libs.kotlin.gradle.plugin.api
        classpath libs.kotlinx.binaryCompatibilityValidator
        classpath libs.ktlint.gradle.plugin
        classpath libs.maven.publish.gradle.plugin
        classpath libs.detekt.gradle.plugin
        classpath libs.ksp.gradle.plugin
    }

    repositories {
        mavenCentral()
        google()
        gradlePluginPortal()

        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
}

allprojects {
    repositories {
        mavenCentral()
        google()

        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
}

def ci = providers.environmentVariable('CI').isPresent() || providers.gradleProperty('CI').isPresent()
logger.lifecycle("CI build: $ci")

subprojects {
    def javaTarget = org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_11
    def javaVersion = JavaVersion.toVersion(javaTarget.target)

    plugins.withType(com.android.build.gradle.BasePlugin).configureEach {
        def android = extensions.getByName('android') as com.android.build.gradle.BaseExtension
        android.compileSdkVersion libs.versions.android.compileSdk.get().toInteger()
        android.defaultConfig {
            minSdkVersion libs.versions.android.minSdk.get().toInteger()
            targetSdkVersion libs.versions.android.compileSdk.get().toInteger()
        }
        android.compileOptions {
            sourceCompatibility javaVersion
            targetCompatibility javaVersion
        }
        android.lintOptions {
            warningsAsErrors true
            htmlReport true
        }

        def androidComponents = extensions.getByName('androidComponents') as com.android.build.api.variant.AndroidComponentsExtension
        androidComponents.beforeVariants(androidComponents.selector().withBuildType('release')) { variant ->
            (variant as com.android.build.api.variant.HasUnitTestBuilder).enableUnitTest = false
        }
    }

    tasks.withType(JavaCompile).configureEach { task ->
        task.sourceCompatibility = javaVersion.majorVersion
        task.targetCompatibility = javaVersion.majorVersion
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinJvmCompile).configureEach { task ->
        task.compilerOptions.jvmTarget.set(javaTarget)
        task.compilerOptions.allWarningsAsErrors.set(ci)
    }

    plugins.withId(libs.plugins.ktlint.get().pluginId) {
        def ktlint = extensions.getByName('ktlint') as org.jlleitschuh.gradle.ktlint.KtlintExtension
        ktlint.filter {
            exclude {
                it.file.path.contains('generated/')
            }
        }
        ktlint.version.set(libs.versions.ktlint.binary)
    }

    plugins.withId(libs.plugins.detekt.get().pluginId) {
        tasks.withType(io.gitlab.arturbosch.detekt.Detekt.class).configureEach { detekt ->
            detekt.jvmTarget = javaVersion.toString()
            if (detekt.name == 'detekt') {
                configureDefaultDetektTask(detekt)
            }
        }

        tasks.withType(io.gitlab.arturbosch.detekt.DetektCreateBaselineTask.class).configureEach { detekt ->
            detekt.jvmTarget = javaVersion.toString()
            if (detekt.name == 'detektBaseline') {
                configureDefaultDetektTask(detekt)
            }
        }

        def detekt = extensions.getByType(io.gitlab.arturbosch.detekt.extensions.DetektExtension.class)
        detekt.baseline = file('detekt-baseline.xml')
        detekt.config.from(rootProject.file('gradle/detekt-config.yml'))
        detekt.setBuildUponDefaultConfig(true)

        tasks.named('check').configure { checkTask ->
            checkTask.dependsOn('detekt')
        }
    }
}

private static void configureDefaultDetektTask(SourceTask task) {
    // The :detekt task in a multiplatform project doesn't do anything, it has no
    // sources configured. Instead, the Detekt plugin creates a Gradle task for each
    // source set, which then need to be wired manually to the 'release' task. This is
    // annoying and tedious.
    //
    // We make the default :detekt task analyze all .kt files, which is faster,
    // because only a single task runs, and we avoid all the wiring.
    task.setSource(task.project.layout.files('src'))
    task.exclude("**/api/**")
    task.exclude("**/build/**")
    task.exclude("**/detekt/**")
}
